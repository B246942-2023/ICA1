#!/usr/bin/bash
if [[ ! -e "status" ]];then # if status not exist , initialize one
    echo "1" > "status"
fi
function manul_program () {

echo "----------------------------------------------------------------------------------------------------------
1.How to use?
Just follow the insturction and input y/n and numbers
But just one thing:
REMEMBER!You should check whether each step is sucessful by go through the command lines and find if there is any ERROR!
You will be asked:  Is the current STEP program sucessful,if there is NO error please input y?(y/n):
yes means your status will be move to next STEP./AND if bug happens , pls input no and run that step again.

2.Can I run a STEP multiply times?
All the STEPS are designed can be run multiply times.Because there's no chain reaction between echo STEPS
That means do not worry if you want to run one STEP twice or more,if bug happens, pls run that step again.
You just need to make sure you've done the previous STEP.(IMPORTANT)

3.If I exit when using it ,is it important?
Your current STEP will be saved in a file called status.
And the program will continue your current step.Just feel free~
If you accidentally modify file status, which may causes problems, choose option 6 to reset.

4.How results will saved
If you want check what i do in each STEP.Folder Purpose are here:

fastq:              Raw fastq data from the server
fastq_decompress:   Decompressed fastq files containing html and zip
qualitysummary:     All summary.txt of fastqc output
good_quality:       summary.txt which are be checked and be considered as good
bad_quality:        summary.txt which are be checked and be considered as bad
lackparis:          if some data have been removed by the STEP2, the files which lack its pairs(_1_,_2_) will be put here
align_out:          the bam files output by bowtie2
align_out_suffix:   the bam files output by bowtie2 and been added suffix to decide its group
bedcounts:          the bed files generated by bedtools
avg:                the avg results (txt) of each group counts
final_results:      group wise comparison       

This manul will be put into the PWD called manul_program.txt

----------------------------------------------------------------------------------------------------------"
}

menu () { 
    echo "----------------------------------------------------------------------------------------------------------"
    echo "Menu
    1.Start from the beginning 
    2.Continue from the current STEP $(cat status) (Recommand)
    3.Choose specific STEP
    4.exit
    5.print manul
    6.reset status
    "
    read -p "Please input your choice: " choice
    
    echo "----------------------------------------------------------------------------------------------------------"
}

echo "----------------------------------------------------------------------------------------------------------"
echo "Welcome to the centercontrol system!
We have totally 6 STEPS for this ICA1 Task "
echo "Checking status : $(cat status)"
if [[ $(cat status) == "1" ]];then
    echo "We are now in the STEP 1"
else
    echo "We went to STEP $(cat status) last time"
fi
read -n1 -sp "Press any key to continue......"
echo

while true;do
    menu
    case $choice in
        1)  
            execute_num=1 
            echo "1" > status;;
        2) 
            execute_num=$(cat status) ;;
        3) 
            read -p "Which STEP do u want execute?" execute_num ;;
        4) 
            exit ;;
        5) 
            rm -rf manul_program.txt
            manul_program
            manul_program > manul_program.txt
            read -n1 -sp "Press any key to continue......"
            echo 
            continue ;;
        6)
            rm -f status 
            exit;;
        *) 
            echo "Wrong command , input again"  
            continue ;;
    esac
    echo "We are going to run STEP$(cat status)"
    read -p "Do you sure you want to execute it (y/n):" double_check
    case $double_check in
        y)
            ./script"$execute_num"_* ;;
        *)
            echo "Undo"
            continue ;;
    esac
    while true ; do
        echo "----------------------------------------------------------------------------------------------------------"
        read -p "Is the current STEP program sucessful,if there is NO error please input y?(y/n):" status_add
        case $status_add in
            y)  
                status_num=$(cat status)
                echo "Move to next STEP "
                ((status_num+=1))
                echo "$status_num">status
                break ;;
            n)
                echo "Let's run again"
                break ;;
            *)  
                echo "Wrong command, input again";;
        esac
    done
    if [[ "$status_num" == 7 ]];then
        rm -f status
        echo "----------------------------------------------------------------------------------------------------------"
        echo "Program finished! Thank you for using!"
        exit
    fi
done

